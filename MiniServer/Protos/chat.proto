syntax = "proto3";

import "google/protobuf/timestamp.proto";
option csharp_namespace = "MiniProtoImpl";

package MiniProto;

service Chat {
    rpc Register(RegisterRequest) returns (RegisterResponse) {}
    rpc Connect(ConnectRequest) returns (ConnectResponse) {}
    rpc RefreshToken(RefreshTokenRequest) returns (ConnectResponse) {}
    rpc InitiateAsyncChannel(stream CommunicationRequest) returns (stream CommunicationResponse) {} // Pipe for messages
}

// TODO: At this very stage protos

message Device {
    string name = 1; // device name
    string os = 2; // device os
    string ip = 3; // device ip
}

message Credentials {
    string name = 1;
    string password = 2;
}

message RefreshTokenRequest {
    string name = 1;
    string refresh_token = 2;
    Device device = 3;
}

message RegisterRequest {
    Credentials credentials = 1;
    string email = 3;
    Device device = 4;
}

message RegisterResponse {
    bool is_succeed = 1;
    string error_msg = 2;
    string token = 3;
    string refresh_token = 4;
}

message ConnectRequest {
    Credentials credentials = 1;
    Device device = 4;
}

message ConnectResponse {
    bool is_succeed = 1;
    string token = 2;
    string refresh_token = 3;
}

// --- MESSAGES ---

message Attachment {
    string name = 1;
    string type = 2;
    bytes data = 3;
}

//        msg_type = Technical message type
//        int8 msg_type
//        0 - default - target id stands for client-side message identifier
//        1 - edit  - target id stands for message target
//        2 - deletion - target id stands for message target
//        [4 - later can be extended to seen] 

message Message {
    int64 id = 1; // server-side
    int64 target_id = 8; // client-side
    int64 author_id = 6; // server-side
    int64 receiver_id = 2; // serves to distinguish between group and user messages
    int64 responses_to = 4; // id of the message this message is a response to (if any)
    string content = 3; 
    repeated Attachment attachment = 5;
    google.protobuf.Timestamp timestamp = 7; // timestamp is server-side
    int32 msg_type = 9; // could be byte, proto3 does not support byte except for array of {bytes}
    bool is_edited = 10; // server-side
}

message DeleteMessageRequest {
    int64 id = 1;
}

message DeleteMessageResponse {
    int64 id = 1;
    bool is_succeed = 2;
}


message RequestDialog {
    int64 last_message_id = 1;
    int64 dialog_id = 2;
    int32 count = 3;
    int32 offset = 4;
}

message RequestUpdate {
    int64 last_message_id = 1;
}

message ContactsMessage {
    repeated Dialog dialogs = 1;
}

message Dialog {
    int64 contact_id = 1;
    Message last_message = 2;
    int64 unread_count = 3;
    string contact_name = 4; // TODO: username or group name 
}

message EditMessageRequest { // Also updates a timestamp 
    int64 id = 1;
    string message = 2;
    repeated Attachment attachment = 3;
}

message DialogBody { // Batch of messages
    int64 contact_id = 1;
    repeated Message messages = 2;
    int64 last_message_id = 3;
}


// Search for
// 1 username
// 2 email
// 3 message
message SearchRequest {
    string query = 1;
}

message ContactMsg{
    string username = 1;
    int64 uid = 2;
    string status = 3; // Stranger, Contact, BlockedBy, BlockedHim
}

message SearchResponse{
    repeated ContactMsg contacts = 1;
}

message FetchUserInfoRequest{
    repeated int64 uids = 1;
}

message UserInfo{
    string username = 1;
    string email = 2;
    string status = 3; // Stranger, Contact, BlockedBy, BlockedHim
}

message UserInfoResponse{
    repeated UserInfo users = 1;
}

message CommunicationRequest {
    string token = 7;
    oneof content {
        Message message = 1;
        DeleteMessageRequest delete_message = 2;
        EditMessageRequest edit_message = 10;
        
        CreateGroupRequest create_group = 3;
        DeleteGroupRequest delete_group = 4;
        AddMemberRequest add_member = 5;
        RemoveMemberRequest remove_member = 6;
        
        RequestUpdate request_update = 8; // requested once on connection
        RequestDialog request_dialog = 9;
        
        SearchRequest search = 11;
        FetchUserInfoRequest fetch_users = 12;
        // Search?
        // Settings?
    }
}
message CommunicationResponse {
    oneof content {
        Message message = 1;
        DeleteMessageResponse delete_message = 2;
        CreateGroupResponse create_group = 3;
        DeleteGroupResponse delete_group = 4;
        AddMemberResponse add_member = 5;
        RemoveMemberResponse remove_member = 6;
        
        ContactsMessage contacts_message = 7;
        DialogBody dialog_update = 8;
        
        string error_msg = 9;
        
        SearchResponse search_response = 10;
        UserInfoResponse user_info = 11;
    }
}


// --- GROUPS ---

message CreateGroupRequest {
    string name = 1;
    string description = 2;
    repeated int64 members = 3;
}

message CreateGroupResponse {
    bool is_succeed = 1;
    int64 id = 2;
    int64 author_id = 5;
    string name = 3;
    string error_msg = 4;
}

message DeleteGroupRequest {
    int64 id = 1;
}

message DeleteGroupResponse {
    bool is_succeed = 1;
    string error_msg = 2;
    int64 id = 3;
    int64 author_id = 4;
}

// TODO add permission logic
message AddMemberRequest {
    int64 group_id = 1;
    int64 member_id = 2;
}

message AddMemberResponse {
    bool is_succeed = 1;
    string error_msg = 2;
    int64 id = 3;
}

message RemoveMemberRequest {
    int64 id = 1;
    int64 member_id = 2;
}

message RemoveMemberResponse {
    bool is_succeed = 1;
    string error_msg = 2;
    int64 id = 3;
    int64 member_id = 4;
}


